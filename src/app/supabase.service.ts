import { Injectable } from '@angular/core';
import { supabase } from './supabase-client';
import { from, Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class SupabaseService {
  // ƒê·∫øm s·ªë b·ªánh nh√¢n theo th√°ng
  getPatientCountByMonth(year: number, month: number): Observable<number> {
    return from(
      supabase
        .rpc('count_patients_by_month', { target_year: year, target_month: month })
        .then(({ data, error }) => {
          if (error) throw error;
          return data || 0;
        })
    );
  }

  // T√≠nh doanh thu theo ng√†y
  getAppointmentCountByDay(targetDate: string): Observable<number> {
    return from(
      supabase
        .rpc('count_appointments_by_day', { target_date: targetDate })
        .then(({ data, error }) => {
          if (error) throw error;
          return data || 0;
        })
    );
  }

  // T√≠nh doanh thu theo ng√†y
  getDailyRevenue(targetDate: string): Observable<number> {
    return from(
      supabase
        .rpc('calculate_daily_revenue', { target_date: targetDate })
        .then(({ data, error }) => {
          if (error) throw error;
          return data || 0;
        })
    );
  }

  // H√†m helper ƒë·ªÉ format ng√†y th√°ng
  private formatDate(date: Date): string {
    return date.toISOString().split('T')[0];
  }

  // L·∫•y ng√†y h√¥m nay
  getTodayDate(): string {
    return this.formatDate(new Date());
  }

  // L·∫•y ng√†y h√¥m qua
  getYesterdayDate(): string {
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    return this.formatDate(yesterday);
  }

  // L·∫•y D·ªãch v·ª•
  async getMedicalService() {
    const { data, error } = await supabase
      .from('medical_services') // üëà t√™n b·∫£ng trong Supabase
      .select('*');

    if (error) {
      console.error('L·ªói l·∫•y d·ªØ li·ªáu:', error.message);
      throw error;
    }

    return data;
  }

  // L·∫•y Lo·∫°i D·ªãch v·ª•
  async getServiceCatagories() {
    const { data, error } = await supabase
      .from('service_categories') // üëà t√™n b·∫£ng trong Supabase
      .select('*');

    if (error) {
      console.error('L·ªói l·∫•y d·ªØ li·ªáu:', error.message);
      throw error;
    }

    return data;
  }

  // L·∫•y t·∫•t c·∫£ b·ªánh nh√¢n
  async getAllPatients() {
    const { data, error } = await supabase
      .from('patients')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      console.error("L·ªói khi load t·∫•t c·∫£ b·ªánh nh√¢n: ", error.message);
      throw error;
    }

    return data || [];
  }

  // T√¨m ki·∫øm b·ªánh nh√¢n theo t√™n, ƒëi·ªán tho·∫°i, ho·∫∑c email
  async searchPatients(fullName: string, phone: string, email: string) {
    const { data, error } = await supabase
      .rpc('search_patients_by_fields', {
        full_name: fullName,
        phone: phone,
        email: email
      });

    if (error) {
      console.error("L·ªói t√¨m ki·∫øm b·ªánh nh√¢n: ", error.message);
      throw error;
    }

    return data || [];
  }

  async searchPatientsGeneral(query: string) {
    const { data, error } = await supabase
      .rpc('search_patients_by_fields', {
        full_name: query,
        phone: query,
        email: query
      });

    if (error) {
      console.error("L·ªói t√¨m ki·∫øm b·ªánh nh√¢n: ", error.message);
      throw error;
    }

    return data || [];
  }


  // T·∫°o b·ªánh nh√¢n m·ªõi
  async createPatient(
    id: string,
    name: string,
    allergies?: object,
    chronic_conditions?: object,
    past_surgeries?: object,
    vaccination_status?: object,
    patient_status: string = 'in_treatment'
  ) {
    const { data, error } = await supabase
      .rpc('create_patient', {
        id,
        name,
        allergies,
        chronic_conditions,
        past_surgeries,
        vaccination_status,
        patient_status
      });

    if (error) {
      console.error('L·ªói t·∫°o b·ªánh nh√¢n:', error.message);
      throw error;
    }

    return data;
  }


  // ============= APPOINTMENT FUNCTIONS =============

  // L·∫•y t·∫•t c·∫£ appointments
  async getAllAppointments() {
    const { data, error } = await supabase
      .from('appointments')
      .select(`
      *,
      patients (
        id,
        full_name,
        phone,
        email
      )
    `)
      .order('created_at', { ascending: false });

    if (error) {
      console.error("L·ªói khi load t·∫•t c·∫£ appointments: ", error.message);
      throw error;
    }

    return data || [];
  }

  // L·∫•y appointment theo ID
  async getAppointmentById(appointmentId: string) {
    const { data, error } = await supabase
      .from('appointments')
      .select(`
      *,
      patients (
        id,
        full_name,
        phone,
        email,
        date_of_birth,
        gender
      )
    `)
      .eq('appointment_id', appointmentId)
      .single();

    if (error) {
      console.error("L·ªói khi load appointment: ", error.message);
      throw error;
    }

    return data;
  }

  // L·∫•y appointments theo patient_id
  async getAppointmentsByPatientId(patientId: string) {
    const { data, error } = await supabase
      .from('appointments')
      .select('*')
      .eq('patient_id', patientId)
      .order('created_at', { ascending: false });

    if (error) {
      console.error("L·ªói khi load appointments c·ªßa b·ªánh nh√¢n: ", error.message);
      throw error;
    }

    return data || [];
  }

  // L·∫•y appointments theo tr·∫°ng th√°i
  async getAppointmentsByStatus(status: string) {
    const { data, error } = await supabase
      .from('appointments')
      .select(`
      *,
      patients (
        id,
        full_name,
        phone,
        email
      )
    `)
      .eq('appointment_status', status)
      .order('created_at', { ascending: false });

    if (error) {
      console.error("L·ªói khi load appointments theo tr·∫°ng th√°i: ", error.message);
      throw error;
    }

    return data || [];
  }

  // L·∫•y appointments theo lo·∫°i visit
  async getAppointmentsByVisitType(visitType: string) {
    const { data, error } = await supabase
      .from('appointments')
      .select(`
      *,
      patients (
        id,
        full_name,
        phone,
        email
      )
    `)
      .eq('visit_type', visitType)
      .order('created_at', { ascending: false });

    if (error) {
      console.error("L·ªói khi load appointments theo lo·∫°i visit: ", error.message);
      throw error;
    }

    return data || [];
  }

  // L·∫•y appointments theo schedule
  async getAppointmentsBySchedule(schedule: string) {
    const { data, error } = await supabase
      .from('appointments')
      .select(`
      *,
      patients (
        id,
        full_name,
        phone,
        email
      )
    `)
      .eq('schedule', schedule)
      .order('created_at', { ascending: false });

    if (error) {
      console.error("L·ªói khi load appointments theo l·ªãch: ", error.message);
      throw error;
    }

    return data || [];
  }

  // T√¨m ki·∫øm appointments theo s·ªë ƒëi·ªán tho·∫°i ho·∫∑c email
  async searchAppointments(searchTerm: string) {
    const { data, error } = await supabase
      .from('appointments')
      .select(`
      *,
      patients (
        id,
        full_name,
        phone,
        email
      )
    `)
      .or(`phone.ilike.%${searchTerm}%,email.ilike.%${searchTerm}%`)
      .order('created_at', { ascending: false });

    if (error) {
      console.error("L·ªói khi t√¨m ki·∫øm appointments: ", error.message);
      throw error;
    }

    return data || [];
  }

  // T·∫°o appointment m·ªõi
  async createAppointment(appointmentData: {
    patient_id?: string;
    phone: string;
    email: string;
    visit_type: string;
    schedule: string;
    message?: string;
    appointment_status?: string;
  }) {
    const { data, error } = await supabase
      .from('appointments')
      .insert([appointmentData])
      .select()
      .single();

    if (error) {
      console.error('L·ªói t·∫°o appointment:', error.message);
      throw error;
    }

    return data;
  }

  // C·∫≠p nh·∫≠t appointment
  async updateAppointment(appointmentId: string, updateData: {
    patient_id?: string;
    phone?: string;
    email?: string;
    visit_type?: string;
    schedule?: string;
    message?: string;
    appointment_status?: string;
  }) {
    const { data, error } = await supabase
      .from('appointments')
      .update({
        ...updateData,
        updated_at: new Date().toISOString()
      })
      .eq('appointment_id', appointmentId)
      .select()
      .single();

    if (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t appointment:', error.message);
      throw error;
    }

    return data;
  }

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i appointment
  async updateAppointmentStatus(appointmentId: string, status: string) {
    const { data, error } = await supabase
      .from('appointments')
      .update({
        appointment_status: status,
        updated_at: new Date().toISOString()
      })
      .eq('appointment_id', appointmentId)
      .select()
      .single();

    if (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i appointment:', error.message);
      throw error;
    }

    return data;
  }

  // X√≥a appointment
  async deleteAppointment(appointmentId: string) {
    const { data, error } = await supabase
      .from('appointments')
      .delete()
      .eq('appointment_id', appointmentId)
      .select()
      .single();

    if (error) {
      console.error('L·ªói x√≥a appointment:', error.message);
      throw error;
    }

    return data;
  }

  // L·∫•y appointments trong kho·∫£ng th·ªùi gian
  async getAppointmentsByDateRange(startDate: string, endDate: string) {
    const { data, error } = await supabase
      .from('appointments')
      .select(`
      *,
      patients (
        id,
        full_name,
        phone,
        email
      )
    `)
      .gte('created_at', startDate)
      .lte('created_at', endDate)
      .order('created_at', { ascending: false });

    if (error) {
      console.error("L·ªói khi load appointments theo ng√†y: ", error.message);
      throw error;
    }

    return data || [];
  }

  // L·∫•y appointments h√¥m nay
  async getTodayAppointments() {
    const today = this.getTodayDate();
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowStr = this.formatDate(tomorrow);

    return this.getAppointmentsByDateRange(today, tomorrowStr);
  }

  // ƒê·∫øm s·ªë l∆∞·ª£ng appointments theo tr·∫°ng th√°i
  async countAppointmentsByStatus(): Promise<{ [key: string]: number }> {
    const { data, error } = await supabase
      .from('appointments')
      .select('appointment_status');

    if (error) {
      console.error("L·ªói khi ƒë·∫øm appointments: ", error.message);
      throw error;
    }

    // ƒê·∫øm theo tr·∫°ng th√°i
    const statusCount: { [key: string]: number } = {};
    data?.forEach(appointment => {
      const status = appointment.appointment_status || 'unknown';
      statusCount[status] = (statusCount[status] || 0) + 1;
    });

    return statusCount;
  }

  // L·∫•y appointments pending (ch·ªù x·ª≠ l√Ω)
  async getPendingAppointments() {
    return this.getAppointmentsByStatus('pending');
  }

  // L·∫•y appointments confirmed (ƒë√£ x√°c nh·∫≠n)
  async getConfirmedAppointments() {
    return this.getAppointmentsByStatus('confirmed');
  }

  // L·∫•y appointments completed (ƒë√£ ho√†n th√†nh)
  async getCompletedAppointments() {
    return this.getAppointmentsByStatus('completed');
  }

  // L·∫•y appointments cancelled (ƒë√£ h·ªßy)
  async getCancelledAppointments() {
    return this.getAppointmentsByStatus('cancelled');
  }

}
